@use 'sass:map';
@use 'sass:color';
@use 'sass:math';
@use '../components/config';

// get colors for components
@function componentColors() {
    @return config.$theme;
}

// get all colors ($variants: include light/dark variants)
@function allColors($variants: true) {
    $all-colors: map.merge(config.$colors, config.$theme);

    @if $variants {
        $color-variants: colorVariants();
        $all-colors: map.merge($color-variants, $all-colors);
    }

    @return $all-colors;
}

// generate light/dark variants for all colors supplied in config.$color-variants
@function colorVariants() {
    $output: ();
    $colors: allColors(
        $variants: false,
    );

    @each $color-name in config.$color-variants {
        $color: map.get($colors, $color-name);

        @if $color {
            $variants: colorVariant($color-name, $color);
            $output: map.merge($output, $variants);
        }
    }

    @return $output;
}

// generate light/dark variations for a single color
@function colorVariant($color-name, $color) {
    $output: ();
    $variant-step: 100% / (config.$color-variant-count + 1);

    @for $scale from 1 through config.$color-variant-count {
        $variant-scale: $scale * $variant-step;

        $light: color.scale($color, $lightness: $variant-scale);
        $lightName: #{$color-name}-l#{$scale};

        $dark: color.scale($color, $lightness: -$variant-scale);
        $darkName: #{$color-name}-d#{$scale};

        $output: map.set($output, $darkName, $dark);
        $output: map.set($output, $lightName, $light);
    }

    @return $output;
}

// ----- Contrast ----
// Formula for determining relative luminance (AKA Contrast ratio)
// https://www.w3.org/TR/WCAG20-TECHS/G18.html#G18-tests

// function to pick the appropriate dark or light text color for the specied background
// will give a warning if the background is not suitable for light or dark text
@function textColor($bg, $text-color) {
    $light-contrast: contrastRatio($bg, #ffffff);
    $dark-contrast: contrastRatio($bg, $text-color);

    @if $light-contrast < 4.5 and $dark-contrast < 4.5 {
        @warn 'background #{$bg} does not have a text color with the appropriate contrast ratio';
    }

    @if $light-contrast < $dark-contrast {
        @return $text-color;
    } @else {
        @return #ffffff;
    }
}

// transform 256 RGB value to gamma corrected value
@function _gamma($color) {
    $normalizedColor: $color/255;

    @if ($normalizedColor < 0.03928) {
        @return $normalizedColor / 12.92;
    } @else {
        @return math.pow((($normalizedColor + 0.055) / 1.055), 2.4);
    }
}

// weights RGB values according to Human perception of brightness
@function _luminance($color) {
    $r256: color.red($color);
    $g256: color.green($color);
    $b256: color.blue($color);

    $r: _gamma($r256);
    $g: _gamma($g256);
    $b: _gamma($b256);

    @return (0.2126 * $r) + (0.7152 * $g) + (0.0722 * $b);
}

// measure of relative luminance
@function contrastRatio($color1, $color2) {
    $l1: _luminance($color1);
    $l2: _luminance($color2);

    @if $l1 > $l2 {
        @return ($l1 + 0.05) / ($l2 + 0.05);
    } @else {
        @return ($l2 + 0.05) / ($l1 + 0.05);
    }
}
