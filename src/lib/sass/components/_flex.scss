//@use 'sass:map';
@use './config';
@use '../utilities/utils';
@use '../utilities/breakpoint';

$breakpoints: config.$breakpoints;
$columns: 12;

// Options to enable/disable responsive classes for certain components
$justify-responsive: true !default;
$align-responsive: true !default;

// ----- FLEX ----
// Top Level API
// - flex-equal: children share all space equally (DEFAULT)
// - flex-auto: each childs width is based on its content
// - flex-{#columns}: each child is given width of 100%/#columns

// Flex Child API
// each child will take its default width from the flex container (details above).
// But can be overridden with the below options
// - fx-{#columns}: a flex child can set its width (or 'column span') based on a 12 column grid
//                             width = 100%/12 * #columns
// - fx-auto: width will be base on it's contents

// [flex-grow] [flex-shrink] [flex-basis]

// Default: equal width (share remaining space equally)
@mixin flex-equal($prefix) {
    .#{$prefix}flex-equal > * {
        flex: 1 0 0;
    }
}

@mixin flex-cols($prefix) {
    @for $i from 1 through $columns {
        .#{$prefix}flex-#{$i} > * {
            flex: 0 0 utils.round(100% / $i, 5, down);
        }
    }
}

// size based on content
@mixin flex-auto($prefix) {
    .#{$prefix}flex-auto > * {
        flex: 0 0 auto;
    }
}

// Child columns/auto
@mixin flex-child($prefix) {
    @for $i from 1 through $columns {
        .#{$prefix}fx-#{$i} {
            flex: 0 0 utils.round((100% / $columns) * $i, 5, down);
        }
    }

    .#{$prefix}fx-auto {
        flex: 0 0 auto;
    }

    .#{$prefix}fx-equal {
        flex: 1 0 0;
    }
}

// flex-direction columns
@mixin flex-direction() {
    .flex--dir-columns {
        flex-direction: column;
    }
}

// JUSTIFY CONTENT
@mixin justify($prefix, $defaultBreakpoint) {
    @if $defaultBreakpoint or $justify-responsive {
        .#{$prefix}justify-center {
            justify-content: center;
        }

        .#{$prefix}justify-start {
            justify-content: flex-start;
        }

        .#{$prefix}justify-end {
            justify-content: flex-end;
        }

        .#{$prefix}justify-between {
            justify-content: space-between;
        }

        .#{$prefix}justify-around {
            justify-content: space-around;
        }

        .#{$prefix}justify-evenly {
            justify-content: space-evenly;
        }
    }
}

// ALIGN ITEMS
@mixin align($prefix, $defaultBreakpoint) {
    @if $defaultBreakpoint or $align-responsive {
        .#{$prefix}align-start {
            align-items: start;
        }

        .#{$prefix}align-end {
            align-items: end;
        }

        .#{$prefix}align-center {
            align-items: center;
        }

        .#{$prefix}align-baseline {
            align-items: baseline;
        }
    }
}

@mixin flex-breakpoints($breakpoint) {
    $prefix: breakpoint.prefix($breakpoint);
    $isDefault: breakpoint.isDefault($breakpoint);

    @include flex-equal($prefix);
    @include flex-auto($prefix);
    @include flex-cols($prefix);

    @include flex-child($prefix);

    @include justify($prefix, $isDefault);
    @include align($prefix, $isDefault);

    @if $isDefault {
        @include flex-direction();
    }
}

// MAIN FELX CONTAINER.
.flex {
    display: flex;
    flex-wrap: wrap;
}

// default to equal width
.flex > * {
    flex: 1 0 0;
}

// GENERATE RESPONSIVE FLEX CLASSES
@each $bk, $bk-size in $breakpoints {
    @include breakpoint.media($bk) {
        @include flex-breakpoints($bk);
    }
}
