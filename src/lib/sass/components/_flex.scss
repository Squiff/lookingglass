//@use 'sass:map';
@use './config';
@use '../utilities/utils';
@use '../utilities/breakpoint';

$breakpoints: config.$breakpoints;
$columns: 12;

// Options to enable/disable responsive classes for certain components
$justify-responsive: true !default;
$align-responsive: true !default;

// equal width (share remaining space equally)
@mixin flex-equal($prefix) {
    .#{$prefix}flex--equal > * {
        flex: 1 0 0;
    }
}

@mixin flex-cols($prefix) {
    @for $i from 1 through $columns {
        .#{$prefix}flex--#{$i} > * {
            flex: 0 0 utils.round(100% / $i, 5, down);
        }
    }
}

// size based on content
@mixin flex-auto($prefix) {
    .#{$prefix}flex--auto > * {
        flex: 0 1 auto;
    }
}

// Child columns/auto
@mixin flex-child($prefix) {
    @for $i from 1 through $columns {
        .#{$prefix}fx--#{$i} {
            flex: 0 0 utils.round((100% / $columns) * $i, 5, down);
        }
    }

    .#{$prefix}fx--auto {
        flex: 0 1 auto;
    }

    .#{$prefix}fx--equal {
        flex: 1 0 0;
    }
}

// flex-direction columns
@mixin flex-direction() {
    .flex--dir-columns {
        flex-direction: column;
    }
}

@mixin flex-wrap() {
    .flex--nowrap {
        flex-wrap: nowrap;
    }
}

// JUSTIFY CONTENT
@mixin justify() {
    .justify--center {
        justify-content: center;
    }

    .justify--start {
        justify-content: flex-start;
    }

    .justify--end {
        justify-content: flex-end;
    }

    .justify--between {
        justify-content: space-between;
    }

    .justify--around {
        justify-content: space-around;
    }

    .justify--evenly {
        justify-content: space-evenly;
    }
}

// ALIGN ITEMS
@mixin align() {
    .align--start {
        align-items: start;
    }

    .align--end {
        align-items: end;
    }

    .align--center {
        align-items: center;
    }

    .align--baseline {
        align-items: baseline;
    }
}

// GENERATE FLEX STYLES FOR A SINGLE BREAKPOINT
@mixin flex-breakpoints($breakpoint) {
    $prefix: breakpoint.prefix($breakpoint);
    $isDefault: breakpoint.isDefault($breakpoint);

    @include flex-equal($prefix);
    @include flex-auto($prefix);
    @include flex-cols($prefix);

    @include flex-child($prefix);

    @if $isDefault {
        @include justify();
        @include align();
        @include flex-direction();
        @include flex-wrap();
    }
}

// MAIN FLEX CONTAINER.
.flex {
    display: flex;
    flex-wrap: wrap;
}

// GENERATE RESPONSIVE FLEX CLASSES
@each $bk, $bk-size in $breakpoints {
    @include breakpoint.media($bk) {
        @include flex-breakpoints($bk);
    }
}
